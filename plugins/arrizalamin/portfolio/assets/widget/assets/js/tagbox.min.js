+function($){"use strict";var tagbox=function(el,config){this.$el=$(el)
    this.alias=this.$el.data('alias')
    this.config=this.$el.data('config')
    this.$tags=this.$el.find('[data-control="tags"]')
    this.$list=this.$el.find('[data-control="list"]')
    this.$last=this.$el.find('[data-control="last"]')
    this.$input=this.$el.find('[data-control="tagbox-input"]')
    this.$template=this.$el.find('[data-control="template"]')
    this.init()}
    tagbox.prototype.init=function(){var self=this
        this.$input.unbind().on('keydown',function(e){var code=e.keyCode||e.which
            if($.inArray(code,self.config.breakCodes)!==-1){e.preventDefault()
                self.addTag($(this).val())}
            if(code==8&&$(this).val()===''){self.backspaceRemove()
                return false}
            self.$list.find('.pre-delete').removeClass('pre-delete')})
        this.$input.on('change keydown keyup paste',function(){self.filterInput()})
        this.$list.on('click','[data-control="remove"]',function(){$(this).closest('li').remove()})
        if(this.config.autofocus){this.$list.on('click',function(){self.$input.focus()})
            this.$input.on('focus',function(){self.$list.addClass('focused')})
            this.$input.on('blur',function(){self.$list.removeClass('focused')})}}
    tagbox.prototype.filterInput=function(){var filter=new RegExp(this.config.filter,'g'),original=this.$input.val()
        this.$input.val(original.replace(filter,''))}
    tagbox.prototype.addTag=function(tag){this.filterInput()
        if(typeof tag!='undefined'&&!tag.length){return false}
        if(this.config.validation&&this.validation(tag)==false){$.oc.flashMsg({text:this.config.validationMessage,'class':'error','interval':3})
            this.$input.focus()
            return false}
        if(this.config.slugify){tag=tag.toLowerCase().replace(/\s+/g,'-').replace(/[^\w\-]+/g,'').replace(/\-\-+/g,'-').replace(/^-+/,'').replace(/-+$/,'')}
        var cleanTag=tag.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"),$exists=this.$list.find('[data-tag="'+cleanTag+'"]'),$newTag=$(this.$template.html())
        if($exists.length){this.flash($exists)
            return false}
        $newTag.attr('data-tag',cleanTag)
        $newTag.find('input').val(tag)
        $newTag.find('[data-control="display"]').html(cleanTag)
        this.$last.before($newTag)
        this.$input.val('')}
    tagbox.prototype.backspaceRemove=function(){var $target=this.$list.find('li:nth-last-child(2)')
        if($target.hasClass('pre-delete')){$target.remove()}else{$target.addClass('pre-delete')}}
    tagbox.prototype.flash=function($tag){$tag.addClass('flash');setTimeout(function(){$tag.removeClass('flash');},300)}
    tagbox.prototype.validation=function(tag){var expression=new RegExp(this.config.validation)
        return expression.test(tag)}
    var old=$.fn.tagbox
    $.fn.tagbox=function(config){return new tagbox($(this),config)}
    $.fn.tagbox.Constructor=tagbox
    $.fn.tagbox.noConflict=function(){$.fn.tagbox=old
        return this}}(window.jQuery);